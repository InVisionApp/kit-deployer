#!/bin/bash

KUBE_VERSION=v1.8.0
VM_DRIVER=hyperkit

CMD=$1

function minikubeRunning {
	minikubeStatus=$(minikube status --format {{.MinikubeStatus}})
	if [[ $minikubeStatus != "" ]]; then
		echo "true"
		return
	fi

	echo "false"
}

function stop {
	echo "Stopping minikube..."
	if [[ "$(minikubeRunning)" == "false" ]]; then
		echo "Minikube wasn't running nothing to stop..."
		return
	fi
	minikube stop
}

function getTotalPods {
	echo $(kubectl get pods -n kube-system | tail -n +2 | wc -l)
}

function getRunningPods {
	echo $(kubectl get pods -n kube-system | grep Running | wc -l)
}

function setMiniKubeConf {
	DELETE_MINIKUBE_INSTANCE="false"
	if [[ $(minikube config get kubernetes-version) != "$KUBE_VERSION" ]]; then
		minikube config set kubernetes-version $KUBE_VERSION
		DELETE_MINIKUBE_INSTANCE="true"
	fi

	if [[ $(minikube config get vm-driver) != "$VM_DRIVER" ]]; then
		minikube config set vm-driver $VM_DRIVER
		DELETE_MINIKUBE_INSTANCE="true"
	fi

	if [[ $DELETE_MINIKUBE_INSTANCE == "true" ]]; then
		minikube delete
	fi
}

function start {
	setMiniKubeConf
	minikube start
	eval $(minikube docker-env)

	while true; do
		if [[ $(getTotalPods) == $(getRunningPods) && $(getTotalPods) != "0" ]]; then
			break
		fi

		echo "Waiting for Kubernetes cluster to become available..."
		echo "Sleeping for 5 sec and checking again"
		sleep 1
	done
	echo "Kubernetes cluster is up."
}

function run_tests {
	this_dir=$(cd -P "$(dirname "$0")" && pwd)
	cd "$this_dir"
	echo "Running tests..."
	docker-compose -f test-functional.yml build && docker-compose -f test-functional.yml up --abort-on-container-exit
	result=$?
	docker-compose -f test-functional.yml stop
	docker-compose -f test-functional.yml rm -f -v
	return $result
}

function prompt {
	read -p "Run tests (y/n)? " CONT
	if [ "$CONT" = "y" ]; then
		run_tests
		prompt
	else
		stop
	fi
}

# Only run tests
if [ "$CMD" = "test" ]; then
	run_tests
	exit $?
fi

echo "Setting up Kubernetes..."
stop
start
prompt
