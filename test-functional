#!/bin/bash

KUBE_VERSION=v1.6.4
KUBERNETES_API_PORT=8080

CMD=$1

function stop {
	echo "Stopping minikube..."
	minikube stop
	echo "Closing tunnel..."
	remove_port_if_forwarded
}

function start {
	minikube config set kubernetes-version $KUBE_VERSION
	minikube start
	eval $(minikube docker-env)

	echo "Setup tunnel..."
	forward_port_if_not_forwarded $KUBERNETES_API_PORT

	echo "Waiting for Kubernetes cluster to become available..."
	until $(curl http://127.0.0.1:$KUBERNETES_API_PORT/api/v1/pods &> /dev/null); do
		sleep 1
	done
	echo "Kubernetes cluster is up."
}

function remove_port_if_forwarded {
	local port=$1
	pkill -f "ssh.*docker.*$port:localhost:$port"
}
# Kube API is accessible on host at 8080, use ssh tunnel
function forward_port_if_not_forwarded {
	local port=$1

	echo "Attempting to close tunnel if one exists..."
	remove_port_if_forwarded

	echo "Attempting to open tunnel..."
	if ! pgrep -f "ssh.*$port:localhost" > /dev/null; then
		ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -i $(minikube ssh-key) docker@$(minikube ip) -f -N -L $port:localhost:$port
	else
		echo "Did not set up port forwarding to the Docker machine: An ssh tunnel on port $port already exists. The kubernetes cluster may not be reachable from local kubectl."
	fi
}

function run_tests {
	this_dir=$(cd -P "$(dirname "$0")" && pwd)
	cd "$this_dir"
	echo "Running tests..."
	docker-compose -f test-functional.yml build && docker-compose -f test-functional.yml up --abort-on-container-exit
	result=$?
	docker-compose -f test-functional.yml stop
	docker-compose -f test-functional.yml rm -f -v
	return $result
}

function prompt {
	read -p "Run tests (y/n)? " CONT
	if [ "$CONT" = "y" ]; then
		run_tests
		prompt
	else
		stop
	fi
}

# Only run tests
if [ "$CMD" = "test" ]; then
	run_tests
	exit $?
fi

echo "Setting up Kubernetes..."
stop
start
prompt
